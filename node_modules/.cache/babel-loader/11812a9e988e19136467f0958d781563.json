{"ast":null,"code":"import _classCallCheck from \"/Users/akaashvenkat/Desktop/Hyperloop/new_test/BruinHyperloop_PodHealthViewer_ReactApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/akaashvenkat/Desktop/Hyperloop/new_test/BruinHyperloop_PodHealthViewer_ReactApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/akaashvenkat/Desktop/Hyperloop/new_test/BruinHyperloop_PodHealthViewer_ReactApp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/akaashvenkat/Desktop/Hyperloop/new_test/BruinHyperloop_PodHealthViewer_ReactApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/akaashvenkat/Desktop/Hyperloop/new_test/BruinHyperloop_PodHealthViewer_ReactApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/akaashvenkat/Desktop/Hyperloop/new_test/BruinHyperloop_PodHealthViewer_ReactApp/src/Table.js\";\nimport React, { Component } from 'react';\nimport { LabelCell, StaticCell, DynamicCell } from './Cell';\n/*\n    TODO:\n    Need to separate Live and Overall Tables into two separate components.\n    Implementations for the Overall Table has been started, basing it off of\n    the implementation for the Live Tables. NEED to make sure the values being\n    passed through components are being done properly. Shouldn't be passing in\n    \"minValues\" or \"maxValues\", but instead be passing in one 2D \"values\" array.\n    This will make rendering them easier (can use a for loop with a general\n    \"DynamicCell\" component like we had before for the min/max Static Cells\n    for the Live Tables.)\n*/\n\nvar Table =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Table, _Component);\n\n  function Table(props) {\n    _classCallCheck(this, Table);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this, props));\n  }\n\n  _createClass(Table, [{\n    key: \"renderDynamicCell\",\n    value: function renderDynamicCell(i) {\n      return React.createElement(DynamicCell, {\n        value: this.props.values[i],\n        bgColor: this.props.bgColors[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      });\n    } //type is either maximum or minimum\n\n  }, {\n    key: \"renderStaticCell\",\n    value: function renderStaticCell(i, type) {\n      var extremeValue = 0;\n      if (type === 'max' || type === 'maximum') extremeValue = this.props.maxValues[i];else if (type === 'min' || type === 'minimum') extremeValue = this.props.minValues[i];\n      return React.createElement(StaticCell, {\n        value: extremeValue,\n        bgColor: this.props.bgColors[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      //wait for passed in custom min/max values or labels, will override (if none passed in, don't render table)\n      if (!this.props.minValues || !this.props.maxValues) return null;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        class: \"livetable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(TableHeader, {\n        tableLabel: this.props.tableLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(TableBody, {\n        rows: this.props.rows,\n        renderStaticCell: function renderStaticCell(i, type) {\n          return _this.renderStaticCell(i, type);\n        },\n        renderDynamicCell: function renderDynamicCell(i) {\n          return _this.renderDynamicCell(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Table;\n}(Component);\n\nvar OverallTable =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(OverallTable, _Component2);\n\n  function OverallTable(props) {\n    _classCallCheck(this, OverallTable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OverallTable).call(this, props));\n  }\n\n  _createClass(OverallTable, [{\n    key: \"renderDynamicCell\",\n    value: function renderDynamicCell(i, j) {\n      return React.createElement(DynamicCell, {\n        value: this.props.values[j][i],\n        bgColor: this.props.bgColors[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        class: \"overalltable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(OverallTableHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(OverallTableBody, {\n        rows: this.props.rows,\n        renderDynamicCell: function renderDynamicCell(i, j) {\n          return _this2.renderDynamicCell(i, j);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return OverallTable;\n}(Component);\n\nvar LabelTable =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(LabelTable, _Component3);\n\n  function LabelTable(props) {\n    _classCallCheck(this, LabelTable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LabelTable).call(this, props));\n  }\n\n  _createClass(LabelTable, [{\n    key: \"renderLabelCell\",\n    value: function renderLabelCell(i) {\n      return React.createElement(LabelCell, {\n        label: this.props.labels[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        class: \"labeltable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(LabelTableHeader, {\n        tableLabel: this.props.tableLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(LabelTableBody, {\n        rows: this.props.rows,\n        renderLabelCell: function renderLabelCell(i) {\n          return _this3.renderLabelCell(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return LabelTable;\n}(Component);\n\nvar LabelTableHeader =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(LabelTableHeader, _Component4);\n\n  function LabelTableHeader() {\n    _classCallCheck(this, LabelTableHeader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LabelTableHeader).apply(this, arguments));\n  }\n\n  _createClass(LabelTableHeader, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"lcol\",\n        bgcolor: 'white',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.props.tableLabel)));\n    }\n  }]);\n\n  return LabelTableHeader;\n}(Component);\n\nvar LabelTableBody =\n/*#__PURE__*/\nfunction (_Component5) {\n  _inherits(LabelTableBody, _Component5);\n\n  function LabelTableBody() {\n    _classCallCheck(this, LabelTableBody);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LabelTableBody).apply(this, arguments));\n  }\n\n  _createClass(LabelTableBody, [{\n    key: \"renderRow\",\n    value: function renderRow(i) {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, this.props.renderLabelCell(i));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var rows = [];\n\n      for (var i = 0; i < this.props.rows; i++) {\n        rows.push(this.renderRow(i));\n      }\n\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, rows);\n    }\n  }]);\n\n  return LabelTableBody;\n}(Component);\n\nvar OverallTableHeader =\n/*#__PURE__*/\nfunction (_Component6) {\n  _inherits(OverallTableHeader, _Component6);\n\n  function OverallTableHeader() {\n    _classCallCheck(this, OverallTableHeader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OverallTableHeader).apply(this, arguments));\n  }\n\n  _createClass(OverallTableHeader, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"othercol\",\n        bgcolor: 'white',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Min\"), React.createElement(\"th\", {\n        className: \"othercol\",\n        bgcolor: 'white',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Average\"), React.createElement(\"th\", {\n        className: \"othercol\",\n        bgcolor: 'white',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Max\")));\n    }\n  }]);\n\n  return OverallTableHeader;\n}(Component);\n\nvar OverallTableBody =\n/*#__PURE__*/\nfunction (_Component7) {\n  _inherits(OverallTableBody, _Component7);\n\n  function OverallTableBody() {\n    _classCallCheck(this, OverallTableBody);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OverallTableBody).apply(this, arguments));\n  }\n\n  _createClass(OverallTableBody, [{\n    key: \"renderRow\",\n    value: function renderRow(i) {\n      var row = [];\n\n      for (var j = 0; j < 3; j++) {\n        row.push(this.props.renderDynamicCell(i, j));\n      }\n\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, row);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var rows = [];\n\n      for (var i = 0; i < this.props.rows; i++) {\n        rows.push(this.renderRow(i));\n      }\n\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, rows);\n    }\n  }]);\n\n  return OverallTableBody;\n}(Component);\n\nvar TableHeader =\n/*#__PURE__*/\nfunction (_Component8) {\n  _inherits(TableHeader, _Component8);\n\n  function TableHeader() {\n    _classCallCheck(this, TableHeader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableHeader).apply(this, arguments));\n  }\n\n  _createClass(TableHeader, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"othercol\",\n        bgcolor: 'white',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"Min Threshold\"), React.createElement(\"th\", {\n        className: \"othercol\",\n        bgcolor: 'white',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"Actual\"), React.createElement(\"th\", {\n        className: \"othercol\",\n        bgcolor: 'white',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Max Threshold\")));\n    }\n  }]);\n\n  return TableHeader;\n}(Component);\n\nvar TableBody =\n/*#__PURE__*/\nfunction (_Component9) {\n  _inherits(TableBody, _Component9);\n\n  function TableBody() {\n    _classCallCheck(this, TableBody);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableBody).apply(this, arguments));\n  }\n\n  _createClass(TableBody, [{\n    key: \"renderRow\",\n    value: function renderRow(i) {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, this.props.renderStaticCell(i, 'min'), this.props.renderDynamicCell(i), this.props.renderStaticCell(i, 'max'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var rows = [];\n\n      for (var i = 0; i < this.props.rows; i++) {\n        rows.push(this.renderRow(i));\n      }\n\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, rows);\n    }\n  }]);\n\n  return TableBody;\n}(Component);\n\nexport { Table, OverallTable, LabelTable };","map":{"version":3,"sources":["/Users/akaashvenkat/Desktop/Hyperloop/new_test/BruinHyperloop_PodHealthViewer_ReactApp/src/Table.js"],"names":["React","Component","LabelCell","StaticCell","DynamicCell","Table","props","i","values","bgColors","type","extremeValue","maxValues","minValues","tableLabel","rows","renderStaticCell","renderDynamicCell","OverallTable","j","LabelTable","labels","renderLabelCell","LabelTableHeader","LabelTableBody","push","renderRow","OverallTableHeader","OverallTableBody","row","TableHeader","TableBody"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,EAAmBC,UAAnB,EAA+BC,WAA/B,QAAiD,QAAjD;AAEA;;;;;;;;;;;;IAYMC,K;;;;;AACF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8EACTA,KADS;AAElB;;;;sCAEiBC,C,EAAG;AACjB,aACI,oBAAC,WAAD;AACI,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,MAAX,CAAkBD,CAAlB,CADX;AAEI,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWG,QAAX,CAAoBF,CAApB,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAMH,K,CAED;;;;qCACiBA,C,EAAEG,I,EAAM;AAErB,UAAIC,YAAY,GAAG,CAAnB;AACA,UAAID,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,SAA/B,EACIC,YAAY,GAAG,KAAKL,KAAL,CAAWM,SAAX,CAAqBL,CAArB,CAAf,CADJ,KAEK,IAAIG,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,SAA/B,EACDC,YAAY,GAAG,KAAKL,KAAL,CAAWO,SAAX,CAAqBN,CAArB,CAAf;AAEJ,aACI,oBAAC,UAAD;AACI,QAAA,KAAK,EAAEI,YADX;AAEI,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWG,QAAX,CAAoBF,CAApB,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAMH;;;6BAEQ;AAAA;;AACL;AACA,UAAI,CAAC,KAAKD,KAAL,CAAWO,SAAZ,IAAyB,CAAC,KAAKP,KAAL,CAAWM,SAAzC,EACI,OAAO,IAAP;AAEJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAO,QAAA,KAAK,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AACI,QAAA,UAAU,EAAE,KAAKN,KAAL,CAAWQ,UAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKI,oBAAC,SAAD;AACI,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWS,IADrB;AAEI,QAAA,gBAAgB,EAAE,0BAACR,CAAD,EAAGG,IAAH;AAAA,iBAAY,KAAI,CAACM,gBAAL,CAAsBT,CAAtB,EAAwBG,IAAxB,CAAZ;AAAA,SAFtB;AAGI,QAAA,iBAAiB,EAAE,2BAACH,CAAD;AAAA,iBAAO,KAAI,CAACU,iBAAL,CAAuBV,CAAvB,CAAP;AAAA,SAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CAFJ,CADJ;AAgBH;;;;EApDeN,S;;IAuDdiB,Y;;;;;AACF,wBAAYZ,KAAZ,EAAmB;AAAA;;AAAA,qFACTA,KADS;AAElB;;;;sCAEiBC,C,EAAEY,C,EAAG;AACnB,aACI,oBAAC,WAAD;AACI,QAAA,KAAK,EAAE,KAAKb,KAAL,CAAWE,MAAX,CAAkBW,CAAlB,EAAqBZ,CAArB,CADX;AAEI,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWG,QAAX,CAAoBF,CAApB,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAMH;;;6BAEQ;AAAA;;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAO,QAAA,KAAK,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAGI,oBAAC,gBAAD;AACI,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWS,IADrB;AAEI,QAAA,iBAAiB,EAAE,2BAACR,CAAD,EAAGY,CAAH;AAAA,iBAAS,MAAI,CAACF,iBAAL,CAAuBV,CAAvB,EAAyBY,CAAzB,CAAT;AAAA,SAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CAFJ,CADJ;AAaH;;;;EA5BsBlB,S;;IA+BrBmB,U;;;;;AACF,sBAAYd,KAAZ,EAAmB;AAAA;;AAAA,mFACTA,KADS;AAElB;;;;oCAEeC,C,EAAG;AACf,aACI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWe,MAAX,CAAkBd,CAAlB,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAKH;;;6BAEQ;AAAA;;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAO,QAAA,KAAK,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,gBAAD;AACI,QAAA,UAAU,EAAE,KAAKD,KAAL,CAAWQ,UAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKI,oBAAC,cAAD;AACI,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWS,IADrB;AAEI,QAAA,eAAe,EAAE,yBAACR,CAAD;AAAA,iBAAO,MAAI,CAACe,eAAL,CAAqBf,CAArB,CAAP;AAAA,SAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CAFJ,CADJ;AAeH;;;;EA7BoBN,S;;IAgCnBsB,gB;;;;;;;;;;;;;6BACO;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,MAAd;AAAqB,QAAA,OAAO,EAAE,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwC,KAAKjB,KAAL,CAAWQ,UAAnD,CADJ,CADJ,CADJ;AAOH;;;;EAT0Bb,S;;IAYzBuB,c;;;;;;;;;;;;;8BAEQjB,C,EACV;AACI,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKD,KAAL,CAAWgB,eAAX,CAA2Bf,CAA3B,CADL,CADJ;AAKH;;;6BAEQ;AAEL,UAAIQ,IAAI,GAAG,EAAX;;AAEA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,KAAL,CAAWS,IAA/B,EAAqCR,CAAC,EAAtC,EAA0C;AACtCQ,QAAAA,IAAI,CAACU,IAAL,CAAU,KAAKC,SAAL,CAAenB,CAAf,CAAV;AACH;;AAED,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKQ,IADL,CADJ;AAKH;;;;EAxBwBd,S;;IA2BvB0B,kB;;;;;;;;;;;;;6BACO;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAE,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAE,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,EAGI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAE,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,CADJ,CADJ;AASH;;;;EAX4B1B,S;;IAc3B2B,gB;;;;;;;;;;;;;8BAEQrB,C,EACV;AACI,UAAIsB,GAAG,GAAG,EAAV;;AAEA,WAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB;AACIU,QAAAA,GAAG,CAACJ,IAAJ,CAAS,KAAKnB,KAAL,CAAWW,iBAAX,CAA6BV,CAA7B,EAA+BY,CAA/B,CAAT;AADJ;;AAGA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKU,GADL,CADJ;AAKH;;;6BAEQ;AAEL,UAAId,IAAI,GAAG,EAAX;;AAEA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,KAAL,CAAWS,IAA/B,EAAqCR,CAAC,EAAtC,EAA0C;AACtCQ,QAAAA,IAAI,CAACU,IAAL,CAAU,KAAKC,SAAL,CAAenB,CAAf,CAAV;AACH;;AAED,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKQ,IADL,CADJ;AAKH;;;;EA7B0Bd,S;;IAgCzB6B,W;;;;;;;;;;;;;6BACO;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAE,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAE,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAGI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAE,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAHJ,CADJ,CADJ;AASH;;;;EAXqB7B,S;;IAcpB8B,S;;;;;;;;;;;;;8BAEQxB,C,EACV;AACI,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKD,KAAL,CAAWU,gBAAX,CAA4BT,CAA5B,EAA8B,KAA9B,CADL,EAEK,KAAKD,KAAL,CAAWW,iBAAX,CAA6BV,CAA7B,CAFL,EAGK,KAAKD,KAAL,CAAWU,gBAAX,CAA4BT,CAA5B,EAA8B,KAA9B,CAHL,CADJ;AAOH;;;6BAEQ;AAEL,UAAIQ,IAAI,GAAG,EAAX;;AAEA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,KAAL,CAAWS,IAA/B,EAAqCR,CAAC,EAAtC,EAA0C;AACtCQ,QAAAA,IAAI,CAACU,IAAL,CAAU,KAAKC,SAAL,CAAenB,CAAf,CAAV;AACH;;AAED,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKQ,IADL,CADJ;AAKH;;;;EA1BmBd,S;;AA6BxB,SACII,KADJ,EAEIa,YAFJ,EAGIE,UAHJ","sourcesContent":["import React, {Component} from 'react';\nimport {LabelCell, StaticCell, DynamicCell} from './Cell';\n\n/*\n    TODO:\n    Need to separate Live and Overall Tables into two separate components.\n    Implementations for the Overall Table has been started, basing it off of\n    the implementation for the Live Tables. NEED to make sure the values being\n    passed through components are being done properly. Shouldn't be passing in\n    \"minValues\" or \"maxValues\", but instead be passing in one 2D \"values\" array.\n    This will make rendering them easier (can use a for loop with a general\n    \"DynamicCell\" component like we had before for the min/max Static Cells\n    for the Live Tables.)\n*/\n\nclass Table extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderDynamicCell(i) {\n        return (\n            <DynamicCell\n                value={this.props.values[i]}\n                bgColor={this.props.bgColors[i]}\n            />\n        );\n    }\n\n    //type is either maximum or minimum\n    renderStaticCell(i,type) {\n        \n        let extremeValue = 0;\n        if (type === 'max' || type === 'maximum')\n            extremeValue = this.props.maxValues[i];\n        else if (type === 'min' || type === 'minimum')\n            extremeValue = this.props.minValues[i];\n\n        return (\n            <StaticCell\n                value={extremeValue}\n                bgColor={this.props.bgColors[i]}\n            />\n        );\n    }\n\n    render() {\n        //wait for passed in custom min/max values or labels, will override (if none passed in, don't render table)\n        if (!this.props.minValues || !this.props.maxValues)\n            return null;\n\n        return (\n            <div>\n                <br />\n                <table class=\"livetable\">\n                    <TableHeader \n                        tableLabel={this.props.tableLabel}\n                    />\n\n                    <TableBody\n                        rows={this.props.rows}\n                        renderStaticCell={(i,type) => this.renderStaticCell(i,type)}\n                        renderDynamicCell={(i) => this.renderDynamicCell(i)}\n                    />\n                </table>\n            </div>\n        );\n    }\n}\n\nclass OverallTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderDynamicCell(i,j) {\n        return (\n            <DynamicCell\n                value={this.props.values[j][i]}\n                bgColor={this.props.bgColors[i]}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <br />\n                <table class=\"overalltable\">\n                    <OverallTableHeader />\n\n                    <OverallTableBody\n                        rows={this.props.rows}\n                        renderDynamicCell={(i,j) => this.renderDynamicCell(i,j)}\n                    />\n                </table>\n            </div>\n        );\n    }\n}\n\nclass LabelTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderLabelCell(i) {\n        return (\n            <LabelCell\n                label={this.props.labels[i]}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <br />\n                <table class=\"labeltable\">\n                    <LabelTableHeader \n                        tableLabel={this.props.tableLabel}\n                    />\n\n                    <LabelTableBody\n                        rows={this.props.rows}\n                        renderLabelCell={(i) => this.renderLabelCell(i)}\n                    />\n                </table>\n            </div>\n        );\n    }\n}\n\nclass LabelTableHeader extends Component {\n    render() {\n        return (\n            <thead>\n                <tr>\n                    <th className=\"lcol\" bgcolor={'white'}>{this.props.tableLabel}</th>\n                </tr>\n            </thead>\n        );\n    }\n}\n\nclass LabelTableBody extends Component {\n    \n    renderRow(i)\n    {\n        return (\n            <tr>\n                {this.props.renderLabelCell(i)}\n            </tr>\n        );\n    }\n\n    render() {\n\n        let rows = [];\n\n        for (var i = 0; i < this.props.rows; i++) {\n            rows.push(this.renderRow(i));\n        }\n\n        return (\n            <tbody>\n                {rows}\n            </tbody>\n        );\n    }\n}\n\nclass OverallTableHeader extends Component {\n    render() {\n        return (\n            <thead>\n                <tr>\n                    <th className=\"othercol\" bgcolor={'white'}>Min</th>\n                    <th className=\"othercol\" bgcolor={'white'}>Average</th>\n                    <th className=\"othercol\" bgcolor={'white'}>Max</th>\n                </tr>\n            </thead>\n        );\n    }\n}\n\nclass OverallTableBody extends Component {\n    \n    renderRow(i)\n    {\n        let row = [];\n\n        for (var j = 0; j < 3; j++)\n            row.push(this.props.renderDynamicCell(i,j));\n\n        return (\n            <tr>\n                {row}\n            </tr>\n        );\n    }\n\n    render() {\n\n        let rows = [];\n\n        for (var i = 0; i < this.props.rows; i++) {\n            rows.push(this.renderRow(i));\n        }\n\n        return (\n            <tbody>\n                {rows}\n            </tbody>\n        );\n    }\n}\n\nclass TableHeader extends Component {\n    render() {\n        return (\n            <thead>\n                <tr>\n                    <th className=\"othercol\" bgcolor={'white'}>Min Threshold</th>\n                    <th className=\"othercol\" bgcolor={'white'}>Actual</th>\n                    <th className=\"othercol\" bgcolor={'white'}>Max Threshold</th>\n                </tr>\n            </thead>\n        );\n    }\n}\n\nclass TableBody extends Component {\n    \n    renderRow(i)\n    {\n        return (\n            <tr>\n                {this.props.renderStaticCell(i,'min')}\n                {this.props.renderDynamicCell(i)}\n                {this.props.renderStaticCell(i,'max')}\n            </tr>\n        );\n    }\n\n    render() {\n\n        let rows = [];\n\n        for (var i = 0; i < this.props.rows; i++) {\n            rows.push(this.renderRow(i));\n        }\n\n        return (\n            <tbody>\n                {rows}\n            </tbody>\n        );\n    }\n}\n\nexport {\n    Table,\n    OverallTable,\n    LabelTable\n}\n"]},"metadata":{},"sourceType":"module"}